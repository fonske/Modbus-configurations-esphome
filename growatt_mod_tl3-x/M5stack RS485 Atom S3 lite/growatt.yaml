substitutions:
  name: growatt
  friendly_name: Growatt

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.11.0
  name_add_mac_suffix: false
  comment: growatt inverter

esp32:
  board: esp32-s3-devkitc-1 #Atom S3 light
  variant: esp32s3
  framework:
    type: esp-idf

logger:
  logs:
    modbus_controller.sensor: DEBUG
    modbus_controller.output: DEBUG
    modbus.number: DEBUG
    esp32.preferences: DEBUG
    sensor: DEBUG
    text_sensor: DEBUG
    switch: DEBUG
    button: DEBUG
    number: DEBUG
    component: ERROR

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  platform: esphome
#  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s

## uncomment if you need a fixed ip address
#  manual_ip:
#    static_ip: 192.168.178.126
#    gateway: 192.168.178.1
#    subnet: 255.255.255.0

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Growatt"
    password: "configesp"
    
captive_portal:
  id: id_captive_portal
    
web_server:
  port: 80

## Configure i2c (port on atom s3)
i2c:
  - id: bus_a
    sda: GPIO2
    scl: GPIO1

## Configure UART
uart:
  - id: mod_bus
    tx_pin: GPIO6
    rx_pin: GPIO5
    baud_rate: 9600
    data_bits: 8
    stop_bits: 1
    parity: NONE

modbus:
  - send_wait_time: 1000ms

modbus_controller:
  - id: ${name}
    address: 0x1
    command_throttle: 20ms
    update_interval: 15s

sensor:
  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv1voltage
    name: pv1 voltage
    address: 3
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv1current
    name: pv1 current
    address: 4
    unit_of_measurement: A
    device_class: current
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv1power
    name: pv1 power
    address: 5
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv2voltage
    name: pv2 voltage
    address: 7
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv2current
    name: pv2 current
    address: 8
    unit_of_measurement: A
    device_class: current
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv2power
    name: pv2 power
    address: 9
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: acfrequency
    name: AC Frequency
    address: 37
    register_type: read
    unit_of_measurement: Hz
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.01
  
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Voltage L1
    id: acvoltagel1
    address: 38
    register_type: read
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Voltage L2
    id: acvoltagel2
    address: 42
    register_type: read
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Voltage L3
    id: acvoltagel3
    address: 46
    register_type: read
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Power
    id: acpower
    address: 35
    register_type: read
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: Energy Today
    id: energytoday
    address: 53
    register_type: read
    unit_of_measurement: kWh
    device_class: energy
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: Energy Total
    id: energytotal
    address: 55
    register_type: read
    unit_of_measurement: kWh
    state_class: total_increasing
    device_class: energy
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: Temperature
    id: temperature
    address: 93
    register_type: read
    unit_of_measurement: "Â°C"
    device_class: temperature
    icon: mdi:thermometer
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: wifi_signal
    name: WiFi Signal Strength
    icon: mdi:wifi
    id: wifi_strength
    update_interval: 30s
    entity_category: diagnostic

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_strength
    name: Wifi signal
    id: wifi_signal_proc
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: diagnostic
    device_class: ""
    icon: mdi:wifi
  
  # uptime sensor
  - platform: uptime
    name: Sensor sec
    id: growatt_uptime_sensor
    update_interval: 60s
    disabled_by_default: true
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: growatt_uptime_human
            state: !lambda |-
              int seconds = round(id(growatt_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "")
              ).c_str();

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: status
    name: Status
    icon: mdi:home-heart
    address: 0
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    skip_updates: 5
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Waiting");
        case 1: return std::string("Normal");
        case 2: return std::string("Fault");
        default: return std::to_string(value);
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: fault_code
    name: Fault
    icon: mdi:home-alert-outline
    address: 103
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    skip_updates: 5
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("No Error");
        case 1: return std::string("Error");
        case 24: return std::string("Auto Test");
        case 25: return std::string("No AC");
        case 26: return std::string("PV Isolation Low");
        case 27: return std::string("Residual I");
        case 28: return std::string("Output High");
        case 29: return std::string("PV Voltage");
        case 30: return std::string("AC V Outrange");
        case 31: return std::string("AC F Outrange");
        case 32: return std::string("PV Voltage");
        case 33: return std::string("Module Hot");
        default: return std::to_string(value);
      }
      return x;

  - platform: wifi_info
    ip_address:
      name: Atom IP
      icon: mdi:ip
    ssid:
      name: Atom SIDD
      icon: mdi:wifi

  # Expose ESPHome version as sensor.
  - platform: version
    name: Versie
    hide_timestamp: true

  # Expose human uptime information as sensor.
  - platform: template
    name: Uptime
    id: growatt_uptime_human
    icon: mdi:clock-start

# limiet beperken
number:
  - platform: modbus_controller
    name: Limit Slider
    id: growatt_limit_slider
    address: 3
    value_type: U_WORD
    min_value: 0
    max_value: 100
    entity_category: config
    unit_of_measurement: " %"

binary_sensor:
## Push button Atom S3 lite
## Kort indrukken = led aan of uit
## Lang indrukken = brightness veranderen
  - platform: gpio
    pin:
      number: GPIO41
      inverted: true
      mode: INPUT_PULLUP
    name: "Brightness Button"
    id: brightness_button
    internal: true
    icon: mdi:brightness-6
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - logger.log: "Lange druk gedetecteerd - start helderheid aanpassen"
          - script.execute: adjust_brightness_loop

      - timing:
          - ON for at most 700ms
          - OFF for at least 50ms
        then:
          - logger.log: "Korte druk - toggle LED"
          - light.toggle: status_led

    on_release:
      then:
        - script.stop: adjust_brightness_loop

###############################################################################
## STATUS LED
###############################################################################
## Simple status led for Atom s3 (lite)
## G35=RGB WS2812C-2020
light:
  - platform: esp32_rmt_led_strip
    id: status_led
    name: Status led
    icon: mdi:lightbulb
    internal: true # Hides from Home Assistant
    rgb_order: GRB
    pin: 35
    num_leds: 4
    chipset: ws2812
    restore_mode: ALWAYS_OFF
    entity_category: diagnostic
    effects:
      - pulse:
          name: slow_pulse
          transition_length: 250ms
          update_interval: 500ms
          min_brightness: 10%
          max_brightness: 50%
      - pulse:
          name: fast_pulse
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 25%
          max_brightness: 100%

# ð¢ Green on => wifi connected- api connected/ Green blinking => wifi connected - api disconnected
# ð£ Purple => wifi disconnected
# ðµ Blue => AP mode

interval:
  - interval: 10s
    then:
      if:
        condition:
          wifi.connected:
        then:
          if:
            condition:
              api.connected:
            then:
              - light.turn_on:
                  id: status_led
                  brightness: 50%
                  red: 0
                  green: 100%
                  blue: 0
                  effect: None
            else:
              - light.turn_on:
                  id: status_led
                  brightness: 50%
                  red: 0
                  green: 100%
                  blue: 0
                  effect: slow_pulse              
        else:
          if:
            condition:
              - lambda: 'return id(id_captive_portal).is_active();'
            then:
              - light.turn_on:
                  id: status_led
                  brightness: 100%
                  red: 0
                  green: 0
                  blue: 100%
            else:
              - light.turn_on:
                  id: status_led
                  brightness: 100%
                  red: 100%
                  green: 0
                  blue: 0

## knop op de atom ingedrukt houden = veranderen brightness
script:
  - id: adjust_brightness_loop
    mode: restart
    then:
      - repeat:
          count: 1000
          then:
            - lambda: |-
                static float brightness = 0.0;
                brightness += 0.1;
                if (brightness > 1.0) brightness = 0.0;
                auto call = id(status_led).make_call();
                call.set_brightness(brightness);
                call.perform();
            - delay: 750ms