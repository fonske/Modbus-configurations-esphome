substitutions:
  device: growatt

esphome:
  name: ${device}
  comment: growatt inverter

esp32:
  board: mhetesp32minikit
  framework:
    type: arduino

logger:
  logs:
    modbus_controller.sensor: DEBUG
    modbus_controller.output: DEBUG
    modbus.number: DEBUG
    esp32.preferences: DEBUG
    sensor: DEBUG
    text_sensor: DEBUG
    switch: DEBUG
    button: DEBUG
    number: DEBUG
    component: ERROR
# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  platform: esphome
#  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Growatt"
    password: "configesp"
    
captive_portal:
    
web_server:
  port: 80

### modbus ###
uart:
  id: mod_bus
  tx_pin: 23 
  rx_pin: 19 
  baud_rate: 9600
  parity: none
  stop_bits: 1
  
modbus:
  - send_wait_time: 1000ms


modbus_controller:
  - id: ${device}
    address: 0x1
    update_interval: 15s

# http request post to PVoutput 
#http_request:

time:
# synchronise time
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Amsterdam"



sensor:
  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: pv1voltage
    name: ${device} pv1 voltage
    address: 3
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: pv1current
    name: ${device} pv1 current
    address: 4
    unit_of_measurement: A
    device_class: current
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: pv1power
    name: ${device} pv1 power
    address: 5
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: pv2voltage
    name: ${device} pv2 voltage
    address: 7
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: pv2current
    name: ${device} pv2 current
    address: 8
    unit_of_measurement: A
    device_class: current
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: pv2power
    name: ${device} pv2 power
    address: 9
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: acfrequency
    name: ${device} Ac Frequency
    address: 37
    register_type: read
    unit_of_measurement: Hz
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.01
  
  - platform: modbus_controller
    modbus_controller_id: ${device}
    name: ${device} Ac Voltage L1
    id: acvoltagel1
    address: 38
    register_type: read
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    name: ${device} Ac Voltage L2
    id: acvoltagel2
    address: 42
    register_type: read
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  
  - platform: modbus_controller
    modbus_controller_id: ${device}
    name: ${device} Ac Voltage L3
    id: acvoltagel3
    address: 46
    register_type: read
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${device}
    name: ${device} Ac Power
    id: acpower
    address: 35
    register_type: read
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    modbus_controller_id: ${device}
    name: ${device} EnergyToday
    id: energytoday
    address: 53
    register_type: read
    unit_of_measurement: kWh
    device_class: energy
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    modbus_controller_id: ${device}
    name: ${device} EnergyTotal
    id: energytotal
    address: 55
    register_type: read
    unit_of_measurement: kWh
    state_class: total_increasing
    device_class: energy
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

    
  - platform: modbus_controller
    modbus_controller_id: ${device}
    name: ${device} Temperature
    id: temperature
    address: 93
    register_type: read
    unit_of_measurement: "Â°C"
    device_class: temperature
    icon: mdi:thermometer
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

 # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${device} WiFi Signaal
    update_interval: 60s
  
  # uptime sensor
  - platform: uptime
    name: ${device} Sensor sec
    id: growatt_uptime_sensor
    update_interval: 60s
    disabled_by_default: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: growatt_uptime_human
            state: !lambda |-
              int seconds = round(id(growatt_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "")
              ).c_str();

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: status
    name: ${device} Status
    icon: mdi:home-heart
    address: 0
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    skip_updates: 5
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Waiting");
        case 1: return std::string("Normal");
        case 2: return std::string("Fault");
        default: return std::to_string(value);
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: ${device}
    id: fault_code
    name: ${device} Fault
    icon: mdi:home-alert-outline
    address: 103
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    skip_updates: 5
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("No Error");
        case 1: return std::string("Error");
        case 24: return std::string("Auto Test");
        case 25: return std::string("No AC");
        case 26: return std::string("PV Isolation Low");
        case 27: return std::string("Residual I");
        case 28: return std::string("Output High");
        case 29: return std::string("PV Voltage");
        case 30: return std::string("AC V Outrange");
        case 31: return std::string("AC F Outrange");
        case 32: return std::string("PV Voltage");
        case 33: return std::string("Module Hot");
        default: return std::to_string(value);
      }
      return x;

  # Expose ESPHome version as sensor.
  - platform: version
    name: ${device} Versie
    hide_timestamp: true

  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${device} IP
    ssid:
      name: ${device} SSID
    bssid:
      name: ${device} BSSID

  # Expose human uptime information as sensor.
  - platform: template
    name: ${device} Uptime
    id: growatt_uptime_human
    icon: mdi:clock-start

  - platform: template
    name: ${device} PVO Upload
    id: pvoutput_upload_status
    icon: mdi:clock-start

  - platform: template
    name: ${device} PVO Last Upload
    id: pvoutput_upload_last
    icon: mdi:clock-start

#switch:  (werkt niet)
  ## uitleg:
  ## https://forum.iobroker.net/assets/uploads/files/1550402978050-growatt-pv-inverter-modbus-rs485-rtu-protocol-v3.05-%E5%AE%A2%E6%88%B7%E7%89%88.pdf
  ## https://gathering.tweakers.net/forum/list_message/79008750#79008750
#  - platform: template
#    id: growatt_power_switch
#    name: ${device} Enabled
#    optimistic: true
#    on_turn_on:
#      then:
#        - lambda: |-
#            esphome::modbus_controller::ModbusController *controller = id(${device});
#            auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
#              controller, 0, 0x0101);
#            delay(3) ;
#            controller->queue_command(set_value_cmd);    
#    on_turn_off:
#      then:
#        - lambda: |-
#            esphome::modbus_controller::ModbusController *controller = id(${device});
#            auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
#              controller, 0, 0x0100);
#            delay(3) ;
#            controller->queue_command(set_value_cmd);

#switch:  (werkt niet)
#  - platform: modbus_controller
#    name: "${device} Enabled"
#    address: 0
#    register_type: coil

number:
  - platform: modbus_controller
    name: "${device} Limit Slider"
    id: growatt_limit_slider
    address: 3
    value_type: U_WORD
    min_value: 0
    max_value: 100
    entity_category: config
    unit_of_measurement: "%"