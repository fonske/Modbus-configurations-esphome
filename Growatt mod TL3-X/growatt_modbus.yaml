substitutions:
  name: growatt
  friendly_name: Growatt
  name_description: "Esphome component for Growatt mod xxxx TL-3X"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  platformio_options:
    board_build.extra_flags:
      - "-DARDUINO_USB_CDC_ON_BOOT=0"

## lilygo T7-S3  ESP32S3:
esp32:
  board: adafruit_feather_esp32s3_nopsram
  framework:
    type: arduino

logger:
  logs:
    modbus_controller.sensor: INFO
    modbus_controller.output: INFO
    modbus.number: INFO
    esp32.preferences: INFO
    sensor: INFO
    text_sensor: INFO
    number: INFO 

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
#  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Growatt"
    password: "configesp"
    
captive_portal:
    
web_server:
  port: 80

# Enable Status LED.
status_led:
  pin:
    number: 17

### modbus ###
uart:
  id: mod_bus
  tx_pin: 16
  rx_pin: 12
  baud_rate: 9600
  parity: none
  stop_bits: 1
  
modbus:
  - send_wait_time: 1000ms


modbus_controller:
  - id: ${name}
    address: 0x1
    update_interval: 15s

## Option for 2x I2C connectors
## Comment with # if not used.
#i2c:  
#  - id: bus_a
#    sda: 13
#    scl: 14
#    scan: true

#  - id: bus_b
#    sda: 10
#    scl: 18
#    scan: true

## Option for Relay  ***experimental***
## Comment with # if not used.
#switch:
#  - platform: gpio
#    pin:
#      number: 5
#      inverted: false
#    name: "Relay"
#    id: relay
#    internal: true
#    icon: mdi:alarm-bell

time:
# synchronise time
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Amsterdam"

sensor:
## Option for DHT11 or DHT22 connect on last 3 terminals -/S(ignal)/+
## Comment with # if not used.
#  - platform: dht
#    model: DHT22
#    pin: 8
#    temperature:
#      name: temperature
#      id: growatt_temperature
#    humidity:
#      name: humidity
#      id: growatt_humidity
#    update_interval: 15s

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv1voltage
    name: pv1 voltage
    address: 3
    unit_of_measurement: V
    name_class: voltage
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv1current
    name: pv1 current
    address: 4
    unit_of_measurement: A
    name_class: current
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv1power
    name: pv1 power
    address: 5
    unit_of_measurement: W
    name_class: power
    icon: mdi:flash
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv2voltage
    name: pv2 voltage
    address: 7
    unit_of_measurement: V
    name_class: voltage
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv2current
    name: pv2 current
    address: 8
    unit_of_measurement: A
    name_class: current
    icon: mdi:flash
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: pv2power
    name: pv2 power
    address: 9
    unit_of_measurement: W
    name_class: power
    icon: mdi:flash
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: acfrequency
    name: AC Frequency
    address: 37
    register_type: read
    unit_of_measurement: Hz
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.01
  
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Voltage L1
    id: acvoltagel1
    address: 38
    register_type: read
    unit_of_measurement: V
    name_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Voltage L2
    id: acvoltagel2
    address: 42
    register_type: read
    unit_of_measurement: V
    name_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Voltage L3
    id: acvoltagel3
    address: 46
    register_type: read
    unit_of_measurement: V
    name_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: AC Power
    id: acpower
    address: 35
    register_type: read
    unit_of_measurement: W
    name_class: power
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: EnergyToday
    id: energytoday
    address: 53
    register_type: read
    unit_of_measurement: kWh
    name_class: energy
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: EnergyTotal
    id: energytotal
    address: 55
    register_type: read
    unit_of_measurement: kWh
    state_class: total_increasing
    name_class: energy
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

    
  - platform: modbus_controller
    modbus_controller_id: ${name}
    name: Temperature
    id: temperature
    address: 93
    register_type: read
    unit_of_measurement: "Â°C"
    name_class: temperature
    icon: mdi:thermometer
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

 # WiFi Signal sensor.
  - platform: wifi_signal
    name: WiFi Signaal
    update_interval: 60s
  
  # uptime sensor
  - platform: uptime
    name: Sensor sec
    id: growatt_uptime_sensor
    update_interval: 60s
    disabled_by_default: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: growatt_uptime_human
            state: !lambda |-
              int seconds = round(id(growatt_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "")
              ).c_str();

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: status
    name: Status
    icon: mdi:home-heart
    address: 0
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    skip_updates: 5
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Waiting");
        case 1: return std::string("Normal");
        case 2: return std::string("Fault");
        default: return std::to_string(value);
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: fault_code
    name: Fault
    icon: mdi:home-alert-outline
    address: 103
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    skip_updates: 5
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("No Error");
        case 1: return std::string("Error");
        case 24: return std::string("Auto Test");
        case 25: return std::string("No AC");
        case 26: return std::string("PV Isolation Low");
        case 27: return std::string("Residual I");
        case 28: return std::string("Output High");
        case 29: return std::string("PV Voltage");
        case 30: return std::string("AC V Outrange");
        case 31: return std::string("AC F Outrange");
        case 32: return std::string("PV Voltage");
        case 33: return std::string("Module Hot");
        default: return std::to_string(value);
      }
      return x;

  # Expose ESPHome version as sensor.
  - platform: version
    name: Versie
    hide_timestamp: true

  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
    bssid:
      name: BSSID

  # Expose human uptime information as sensor.
  - platform: template
    name: Uptime
    id: growatt_uptime_human
    icon: mdi:clock-start